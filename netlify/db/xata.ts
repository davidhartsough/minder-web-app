// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "users",
    columns: [
      { name: "items", type: "multiple" },
      { name: "index", type: "int", notNull: true, defaultValue: "0" },
      { name: "sequence", type: "multiple" },
      {
        name: "tz",
        type: "text",
        notNull: true,
        defaultValue: "America/Chicago",
      },
      { name: "pushTime", type: "datetime" },
      { name: "subEndpoint", type: "text" },
      { name: "subP256dh", type: "text" },
      { name: "subAuth", type: "text" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://dave-s74bp1.us-west-2.xata.sh/db/minder",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
